


ARM Macro Assembler    Page 1 


    1 00000000         ;-------------------------------------------------------
                       ------------------------
    2 00000000         ; sys_core.asm
    3 00000000         ;
    4 00000000         ; Copyright (C) 2009-2014 Texas Instruments Incorporated
                        - http://www.ti.com/ 
    5 00000000         ; 
    6 00000000         ; 
    7 00000000         ;  Redistribution and use in source and binary forms, wi
                       th or without 
    8 00000000         ;  modification, are permitted provided that the followi
                       ng conditions 
    9 00000000         ;  are met:
   10 00000000         ;
   11 00000000         ;    Redistributions of source code must retain the abov
                       e copyright 
   12 00000000         ;    notice, this list of conditions and the following d
                       isclaimer.
   13 00000000         ;
   14 00000000         ;    Redistributions in binary form must reproduce the a
                       bove copyright
   15 00000000         ;    notice, this list of conditions and the following d
                       isclaimer in the 
   16 00000000         ;    documentation and/or other materials provided with 
                       the   
   17 00000000         ;    distribution.
   18 00000000         ;
   19 00000000         ;    Neither the name of Texas Instruments Incorporated 
                       nor the names of
   20 00000000         ;    its contributors may be used to endorse or promote 
                       products derived
   21 00000000         ;    from this software without specific prior written p
                       ermission.
   22 00000000         ;
   23 00000000         ;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AN
                       D CONTRIBUTORS 
   24 00000000         ;  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUD
                       ING, BUT NOT 
   25 00000000         ;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
                        AND FITNESS FOR
   26 00000000         ;  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHAL
                       L THE COPYRIGHT 
   27 00000000         ;  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIR
                       ECT, INCIDENTAL, 
   28 00000000         ;  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDI
                       NG, BUT NOT 
   29 00000000         ;  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVIC
                       ES; LOSS OF USE,
   30 00000000         ;  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER C
                       AUSED AND ON ANY
   31 00000000         ;  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIAB
                       ILITY, OR TORT 
   32 00000000         ;  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WA
                       Y OUT OF THE USE 
   33 00000000         ;  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
                       OF SUCH DAMAGE.
   34 00000000         ;
   35 00000000         ;
   36 00000000         ;



ARM Macro Assembler    Page 2 


   37 00000000         
   38 00000000                 area             |.text|, code, readonly
   39 00000000                 arm
   40 00000000         
   41 00000000         ;-------------------------------------------------------
                       ------------------------
   42 00000000         ; Initialize CPU Registers
   43 00000000         ; SourceId : CORE_SourceId_001
   44 00000000         ; DesignId : CORE_DesignId_001
   45 00000000         ; Requirements: HL_SR477, HL_SR476, HL_SR492
   46 00000000         
   47 00000000                 export           _coreInitRegisters_
   48 00000000         
   49 00000000         
   50 00000000         
   51 00000000         _coreInitRegisters_
   52 00000000         
   53 00000000         
   54 00000000         ; After reset, the CPU is in the Supervisor mode (M = 10
                       011)
   55 00000000 E1A0000E        mov              r0, lr
   56 00000004 E3A01000        mov              r1, #0x0000
   57 00000008 E3A02000        mov              r2, #0x0000
   58 0000000C E3A03000        mov              r3, #0x0000
   59 00000010 E3A04000        mov              r4, #0x0000
   60 00000014 E3A05000        mov              r5, #0x0000
   61 00000018 E3A06000        mov              r6, #0x0000
   62 0000001C E3A07000        mov              r7, #0x0000
   63 00000020 E3A08000        mov              r8, #0x0000
   64 00000024 E3A09000        mov              r9, #0x0000
   65 00000028 E3A0A000        mov              r10, #0x0000
   66 0000002C E3A0B000        mov              r11, #0x0000
   67 00000030 E3A0C000        mov              r12, #0x0000
   68 00000034 E3A0D000        mov              r13, #0x0000
   69 00000038 E10F1000        mrs              r1, cpsr
   70 0000003C E16FF001        msr              spsr_cxsf, r1
   71 00000040         ; Switch to FIQ mode (M = 10001)
   72 00000040 F1020011        cps              #17
   73 00000044 E1A0E000        mov              lr, r0
   74 00000048 E3A08000        mov              r8, #0x0000
   75 0000004C E3A09000        mov              r9, #0x0000
   76 00000050 E3A0A000        mov              r10, #0x0000
   77 00000054 E3A0B000        mov              r11, #0x0000
   78 00000058 E3A0C000        mov              r12, #0x0000
   79 0000005C E10F1000        mrs              r1, cpsr
   80 00000060 E16FF001        msr              spsr_cxsf, r1
   81 00000064         ; Switch to IRQ mode (M = 10010)
   82 00000064 F1020012        cps              #18
   83 00000068 E1A0E000        mov              lr, r0
   84 0000006C E10F1000        mrs              r1,cpsr
   85 00000070 E16FF001        msr              spsr_cxsf, r1
   86 00000074         ; Switch to Abort mode (M = 10111)
   87 00000074 F1020017        cps              #23
   88 00000078 E1A0E000        mov              lr, r0
   89 0000007C E10F1000        mrs              r1,cpsr
   90 00000080 E16FF001        msr              spsr_cxsf, r1
   91 00000084         ; Switch to Undefined Instruction Mode (M = 11011)
   92 00000084 F102001B        cps              #27
   93 00000088 E1A0E000        mov              lr, r0



ARM Macro Assembler    Page 3 


   94 0000008C E10F1000        mrs              r1,cpsr
   95 00000090 E16FF001        msr              spsr_cxsf, r1
   96 00000094         ; Switch to System Mode ( Shares User Mode registers ) (
                       M = 11111)
   97 00000094 F102001F        cps              #31
   98 00000098 E1A0E000        mov              lr, r0
   99 0000009C E10F1000        mrs              r1,cpsr
  100 000000A0 E16FF001        msr              spsr_cxsf, r1
  101 000000A4         
  102 000000A4         
  103 000000A4 EE112F50        mrc              p15,     #0x00,      r2,       
c1, c0, #0x02
  104 000000A8 E382260F        orr              r2,      r2,         #0xF00000
  105 000000AC EE012F50        mcr              p15,     #0x00,      r2,       
c1, c0, #0x02
  106 000000B0 E3A02101        mov              r2,      #0x40000000
  107 000000B4 EEE82A10        fmxr             fpexc,   r2
  108 000000B8         
  109 000000B8 EC411B10        fmdrr            d0,         r1,     r1
  110 000000BC EC411B11        fmdrr            d1,         r1,     r1
  111 000000C0 EC411B12        fmdrr            d2,         r1,     r1
  112 000000C4 EC411B13        fmdrr            d3,         r1,     r1
  113 000000C8 EC411B14        fmdrr            d4,         r1,     r1
  114 000000CC EC411B15        fmdrr            d5,         r1,     r1
  115 000000D0 EC411B16        fmdrr            d6,         r1,     r1
  116 000000D4 EC411B17        fmdrr            d7,         r1,     r1
  117 000000D8 EC411B18        fmdrr            d8,         r1,     r1
  118 000000DC EC411B19        fmdrr            d9,         r1,     r1
  119 000000E0 EC411B1A        fmdrr            d10,        r1,     r1
  120 000000E4 EC411B1B        fmdrr            d11,        r1,     r1
  121 000000E8 EC411B1C        fmdrr            d12,        r1,     r1
  122 000000EC EC411B1D        fmdrr            d13,        r1,     r1
  123 000000F0 EC411B1E        fmdrr            d14,        r1,     r1
  124 000000F4 EC411B1F        fmdrr            d15,        r1,     r1
  125 000000F8 EBFFFFFF        bl               next1
  126 000000FC         next1
  127 000000FC EBFFFFFF        bl               next2
  128 00000100         next2
  129 00000100 EBFFFFFF        bl               next3
  130 00000104         next3
  131 00000104 EBFFFFFF        bl               next4
  132 00000108         next4
  133 00000108 E12FFF10        bx               r0
  134 0000010C         
  135 0000010C         
  136 0000010C         
  137 0000010C         
  138 0000010C         ;-------------------------------------------------------
                       ------------------------
  139 0000010C         ; Initialize Stack Pointers
  140 0000010C         ; SourceId : CORE_SourceId_002
  141 0000010C         ; DesignId : CORE_DesignId_002
  142 0000010C         ; Requirements: HL_SR478
  143 0000010C         
  144 0000010C                 export           _coreInitStackPointer_
  145 0000010C         
  146 0000010C         
  147 0000010C         _coreInitStackPointer_
  148 0000010C         



ARM Macro Assembler    Page 4 


  149 0000010C F1020011        cps              #17
  150 00000110 E59FD030        ldr              sp,       fiqSp
  151 00000114 F1020012        cps              #18
  152 00000118 E59FD02C        ldr              sp,       irqSp
  153 0000011C F1020013        cps              #19
  154 00000120 E59FD01C        ldr              sp,       svcSp
  155 00000124 F1020017        cps              #23
  156 00000128 E59FD020        ldr              sp,       abortSp
  157 0000012C F102001B        cps              #27
  158 00000130 E59FD01C        ldr              sp,       undefSp
  159 00000134 F102001F        cps              #31
  160 00000138 E59FD000        ldr              sp,       userSp
  161 0000013C E12FFF1E        bx               lr
  162 00000140         
  163 00000140 08001000 
                       userSp  dcd              0x08000000+0x00001000
  164 00000144 08001100 
                       svcSp   dcd              0x08000000+0x00001000+0x0000010
0
  165 00000148 08001200 
                       fiqSp   dcd              0x08000000+0x00001000+0x0000010
0+0x00000100
  166 0000014C 08001300 
                       irqSp   dcd              0x08000000+0x00001000+0x0000010
0+0x00000100+0x00000100
  167 00000150 08001400 
                       abortSp dcd              0x08000000+0x00001000+0x0000010
0+0x00000100+0x00000100+0x00000100
  168 00000154 08001500 
                       undefSp dcd              0x08000000+0x00001000+0x0000010
0+0x00000100+0x00000100+0x00000100+0x00000100
  169 00000158         
  170 00000158         
  171 00000158         
  172 00000158         ;-------------------------------------------------------
                       ------------------------
  173 00000158         ; Get CPSR Value
  174 00000158         ; SourceId : CORE_SourceId_003
  175 00000158         ; DesignId : CORE_DesignId_003
  176 00000158         ; Requirements: 
  177 00000158         
  178 00000158                 export           _getCPSRValue_
  179 00000158         
  180 00000158         
  181 00000158         _getCPSRValue_
  182 00000158         
  183 00000158 E10F0000        mrs              r0, CPSR
  184 0000015C E12FFF1E        bx               lr
  185 00000160         
  186 00000160         
  187 00000160         
  188 00000160         ;-------------------------------------------------------
                       ------------------------
  189 00000160         ; Take CPU to IDLE state
  190 00000160         ; SourceId : CORE_SourceId_004
  191 00000160         ; DesignId : CORE_DesignId_004
  192 00000160         ; Requirements: HL_SR493
  193 00000160         
  194 00000160                 export           _gotoCPUIdle_



ARM Macro Assembler    Page 5 


  195 00000160         
  196 00000160         
  197 00000160         _gotoCPUIdle_
  198 00000160         
  199 00000160 E320F003        WFI
  200 00000164 E320F000        nop
  201 00000168 E320F000        nop
  202 0000016C E320F000        nop
  203 00000170 E320F000        nop
  204 00000174 E12FFF1E        bx               lr
  205 00000178         
  206 00000178         
  207 00000178         
  208 00000178         
  209 00000178         ;-------------------------------------------------------
                       ------------------------
  210 00000178         ; Enable VFP Unit
  211 00000178         ; SourceId : CORE_SourceId_005
  212 00000178         ; DesignId : CORE_DesignId_006
  213 00000178         ; Requirements: HL_SR492, HL_SR476
  214 00000178         
  215 00000178                 export           _coreEnableVfp_
  216 00000178         
  217 00000178         
  218 00000178         _coreEnableVfp_
  219 00000178         
  220 00000178 EE110F50        mrc              p15,     #0x00,      r0,       
c1, c0, #0x02
  221 0000017C E380060F        orr              r0,      r0,         #0xF00000
  222 00000180 EE010F50        mcr              p15,     #0x00,      r0,       
c1, c0, #0x02
  223 00000184 E3A00101        mov              r0,      #0x40000000
  224 00000188 EEE80A10        fmxr             fpexc,   r0
  225 0000018C E12FFF1E        bx               lr
  226 00000190         
  227 00000190         
  228 00000190         
  229 00000190         ;-------------------------------------------------------
                       ------------------------
  230 00000190         ; Enable Event Bus Export
  231 00000190         ; SourceId : CORE_SourceId_006
  232 00000190         ; DesignId : CORE_DesignId_007
  233 00000190         ; Requirements: HL_SR479
  234 00000190         
  235 00000190                 export           _coreEnableEventBusExport_
  236 00000190         
  237 00000190         
  238 00000190         _coreEnableEventBusExport_
  239 00000190         
  240 00000190 E92D0001        stmfd            sp!, {r0}
  241 00000194 EE190F1C        mrc              p15, #0x00, r0,         c9, c12
, #0x00
  242 00000198 E3800010        orr              r0,  r0,    #0x10
  243 0000019C EE090F1C        mcr              p15, #0x00, r0,         c9, c12
, #0x00
  244 000001A0 E8BD0001        ldmfd            sp!, {r0}
  245 000001A4 E12FFF1E        bx               lr
  246 000001A8         
  247 000001A8         



ARM Macro Assembler    Page 6 


  248 000001A8         
  249 000001A8         
  250 000001A8         ;-------------------------------------------------------
                       ------------------------
  251 000001A8         ; Disable Event Bus Export
  252 000001A8         ; SourceId : CORE_SourceId_007
  253 000001A8         ; DesignId : CORE_DesignId_008
  254 000001A8         ; Requirements: HL_SR481
  255 000001A8         
  256 000001A8         
  257 000001A8                 export           _coreDisableEventBusExport_
  258 000001A8         
  259 000001A8         
  260 000001A8         _coreDisableEventBusExport_
  261 000001A8         
  262 000001A8 E92D0001        stmfd            sp!, {r0}
  263 000001AC EE190F1C        mrc              p15, #0x00, r0,         c9, c12
, #0x00
  264 000001B0 E3C00010        bic              r0,  r0,    #0x10
  265 000001B4 EE090F1C        mcr              p15, #0x00, r0,         c9, c12
, #0x00
  266 000001B8 E8BD0001        ldmfd            sp!, {r0}
  267 000001BC E12FFF1E        bx               lr
  268 000001C0         
  269 000001C0         
  270 000001C0         
  271 000001C0         
  272 000001C0         ;-------------------------------------------------------
                       ------------------------
  273 000001C0         ; Enable RAM ECC Support
  274 000001C0         ; SourceId : CORE_SourceId_008
  275 000001C0         ; DesignId : CORE_DesignId_009
  276 000001C0         ; Requirements: HL_SR480
  277 000001C0         
  278 000001C0                 export           _coreEnableRamEcc_
  279 000001C0         
  280 000001C0         
  281 000001C0         _coreEnableRamEcc_
  282 000001C0         
  283 000001C0 E92D0001        stmfd            sp!, {r0}
  284 000001C4 EE110F30        mrc              p15, #0x00, r0,         c1, c0,
  #0x01
  285 000001C8 E3800303        orr              r0,  r0,    #0x0C000000
  286 000001CC EE010F30        mcr              p15, #0x00, r0,         c1, c0,
  #0x01
  287 000001D0 E8BD0001        ldmfd            sp!, {r0}
  288 000001D4 E12FFF1E        bx               lr
  289 000001D8         
  290 000001D8         
  291 000001D8         
  292 000001D8         
  293 000001D8         ;-------------------------------------------------------
                       ------------------------
  294 000001D8         ; Disable RAM ECC Support
  295 000001D8         ; SourceId : CORE_SourceId_009
  296 000001D8         ; DesignId : CORE_DesignId_010
  297 000001D8         ; Requirements: HL_SR482
  298 000001D8         
  299 000001D8                 export           _coreDisableRamEcc_



ARM Macro Assembler    Page 7 


  300 000001D8         
  301 000001D8         
  302 000001D8         _coreDisableRamEcc_
  303 000001D8         
  304 000001D8 E92D0001        stmfd            sp!, {r0}
  305 000001DC EE110F30        mrc              p15, #0x00, r0,         c1, c0,
  #0x01
  306 000001E0 E3C00303        bic              r0,  r0,    #0x0C000000
  307 000001E4 EE010F30        mcr              p15, #0x00, r0,         c1, c0,
  #0x01
  308 000001E8 E8BD0001        ldmfd            sp!, {r0}
  309 000001EC E12FFF1E        bx               lr
  310 000001F0         
  311 000001F0         
  312 000001F0         
  313 000001F0         
  314 000001F0         ;-------------------------------------------------------
                       ------------------------
  315 000001F0         ; Enable Flash ECC Support
  316 000001F0         ; SourceId : CORE_SourceId_010
  317 000001F0         ; DesignId : CORE_DesignId_011
  318 000001F0         ; Requirements: HL_SR480, HL_SR458
  319 000001F0         
  320 000001F0                 export           _coreEnableFlashEcc_
  321 000001F0         
  322 000001F0         
  323 000001F0         _coreEnableFlashEcc_
  324 000001F0         
  325 000001F0 E92D0001        stmfd            sp!, {r0}
  326 000001F4 EE110F30        mrc              p15, #0x00, r0,         c1, c0,
  #0x01
  327 000001F8 E3800402        orr              r0,  r0,    #0x02000000
  328 000001FC F57FF05F        dmb
  329 00000200 EE010F30        mcr              p15, #0x00, r0,         c1, c0,
  #0x01
  330 00000204 E8BD0001        ldmfd            sp!, {r0}
  331 00000208 E12FFF1E        bx               lr
  332 0000020C         
  333 0000020C         
  334 0000020C         
  335 0000020C         
  336 0000020C         ;-------------------------------------------------------
                       ------------------------
  337 0000020C         ; Disable Flash ECC Support
  338 0000020C         ; SourceId : CORE_SourceId_011
  339 0000020C         ; DesignId : CORE_DesignId_012
  340 0000020C         ; Requirements: HL_SR482
  341 0000020C         
  342 0000020C                 export           _coreDisableFlashEcc_
  343 0000020C         
  344 0000020C         
  345 0000020C         _coreDisableFlashEcc_
  346 0000020C         
  347 0000020C E92D0001        stmfd            sp!, {r0}
  348 00000210 EE110F30        mrc              p15, #0x00, r0,         c1, c0,
  #0x01
  349 00000214 E3C00402        bic              r0,  r0,    #0x02000000
  350 00000218 EE010F30        mcr              p15, #0x00, r0,         c1, c0,
  #0x01



ARM Macro Assembler    Page 8 


  351 0000021C E8BD0001        ldmfd            sp!, {r0}
  352 00000220 E12FFF1E        bx               lr
  353 00000224         
  354 00000224         
  355 00000224         
  356 00000224         
  357 00000224         ;-------------------------------------------------------
                       ------------------------
  358 00000224         ; Enable Offset via Vic controller
  359 00000224         ; SourceId : CORE_SourceId_012
  360 00000224         ; DesignId : CORE_DesignId_005
  361 00000224         ; Requirements: HL_SR483, HL_SR491
  362 00000224         
  363 00000224                 export           _coreEnableIrqVicOffset_
  364 00000224         
  365 00000224         
  366 00000224         _coreEnableIrqVicOffset_
  367 00000224         
  368 00000224 E92D0001        stmfd            sp!, {r0}
  369 00000228 EE110F10        mrc              p15, #0, r0,         c1, c0,  #
0
  370 0000022C E3800401        orr              r0,  r0,    #0x01000000
  371 00000230 EE010F10        mcr              p15, #0, r0,         c1, c0,  #
0
  372 00000234 E8BD0001        ldmfd            sp!, {r0}
  373 00000238 E12FFF1E        bx               lr
  374 0000023C         
  375 0000023C         
  376 0000023C         
  377 0000023C         
  378 0000023C         ;-------------------------------------------------------
                       ------------------------
  379 0000023C         ; Get data fault status register
  380 0000023C         ; SourceId : CORE_SourceId_013
  381 0000023C         ; DesignId : CORE_DesignId_013
  382 0000023C         ; Requirements: HL_SR495
  383 0000023C         
  384 0000023C                 export           _coreGetDataFault_
  385 0000023C         
  386 0000023C         
  387 0000023C         _coreGetDataFault_
  388 0000023C         
  389 0000023C EE150F10        mrc              p15, #0, r0, c5, c0,  #0
  390 00000240 E12FFF1E        bx               lr
  391 00000244         
  392 00000244         
  393 00000244         
  394 00000244         
  395 00000244         ;-------------------------------------------------------
                       ------------------------
  396 00000244         ; Clear data fault status register
  397 00000244         ; SourceId : CORE_SourceId_014
  398 00000244         ; DesignId : CORE_DesignId_014
  399 00000244         ; Requirements: HL_SR495
  400 00000244         
  401 00000244                 export           _coreClearDataFault_
  402 00000244         
  403 00000244         
  404 00000244         _coreClearDataFault_



ARM Macro Assembler    Page 9 


  405 00000244         
  406 00000244 E92D0001        stmfd            sp!, {r0}
  407 00000248 E3A00000        mov              r0,  #0
  408 0000024C EE050F10        mcr              p15, #0, r0, c5, c0,  #0
  409 00000250 E8BD0001        ldmfd            sp!, {r0}
  410 00000254 E12FFF1E        bx               lr
  411 00000258         
  412 00000258         
  413 00000258         
  414 00000258         
  415 00000258         ;-------------------------------------------------------
                       ------------------------
  416 00000258         ; Get instruction fault status register
  417 00000258         ; SourceId : CORE_SourceId_015
  418 00000258         ; DesignId : CORE_DesignId_015
  419 00000258         ; Requirements: HL_SR495
  420 00000258         
  421 00000258                 export           _coreGetInstructionFault_
  422 00000258         
  423 00000258         
  424 00000258         _coreGetInstructionFault_
  425 00000258         
  426 00000258 EE150F30        mrc              p15, #0, r0, c5, c0, #1
  427 0000025C E12FFF1E        bx               lr
  428 00000260         
  429 00000260         
  430 00000260         
  431 00000260         
  432 00000260         ;-------------------------------------------------------
                       ------------------------
  433 00000260         ; Clear instruction fault status register
  434 00000260         ; SourceId : CORE_SourceId_016
  435 00000260         ; DesignId : CORE_DesignId_016
  436 00000260         ; Requirements: HL_SR495
  437 00000260         
  438 00000260                 export           _coreClearInstructionFault_
  439 00000260         
  440 00000260         
  441 00000260         _coreClearInstructionFault_
  442 00000260         
  443 00000260 E92D0001        stmfd            sp!, {r0}
  444 00000264 E3A00000        mov              r0,  #0
  445 00000268 EE050F30        mcr              p15, #0, r0, c5, c0, #1
  446 0000026C E8BD0001        ldmfd            sp!, {r0}
  447 00000270 E12FFF1E        bx               lr
  448 00000274         
  449 00000274         
  450 00000274         
  451 00000274         
  452 00000274         ;-------------------------------------------------------
                       ------------------------
  453 00000274         ; Get data fault address register
  454 00000274         ; SourceId : CORE_SourceId_017
  455 00000274         ; DesignId : CORE_DesignId_017
  456 00000274         ; Requirements: HL_SR495
  457 00000274         
  458 00000274                 export           _coreGetDataFaultAddress_
  459 00000274         
  460 00000274         



ARM Macro Assembler    Page 10 


  461 00000274         _coreGetDataFaultAddress_
  462 00000274         
  463 00000274 EE160F10        mrc              p15, #0, r0, c6, c0,  #0
  464 00000278 E12FFF1E        bx               lr
  465 0000027C         
  466 0000027C         
  467 0000027C         
  468 0000027C         
  469 0000027C         ;-------------------------------------------------------
                       ------------------------
  470 0000027C         ; Clear data fault address register
  471 0000027C         ; SourceId : CORE_SourceId_018
  472 0000027C         ; DesignId : CORE_DesignId_018
  473 0000027C         ; Requirements: HL_SR495
  474 0000027C         
  475 0000027C                 export           _coreClearDataFaultAddress_
  476 0000027C         
  477 0000027C         
  478 0000027C         _coreClearDataFaultAddress_
  479 0000027C         
  480 0000027C E92D0001        stmfd            sp!, {r0}
  481 00000280 E3A00000        mov              r0,  #0
  482 00000284 EE060F10        mcr              p15, #0, r0, c6, c0,  #0
  483 00000288 E8BD0001        ldmfd            sp!, {r0}
  484 0000028C E12FFF1E        bx               lr
  485 00000290         
  486 00000290         
  487 00000290         
  488 00000290         
  489 00000290         ;-------------------------------------------------------
                       ------------------------
  490 00000290         ; Get instruction fault address register
  491 00000290         ; SourceId : CORE_SourceId_019
  492 00000290         ; DesignId : CORE_DesignId_019
  493 00000290         ; Requirements: HL_SR495
  494 00000290         
  495 00000290                 export           _coreGetInstructionFaultAddress
_
  496 00000290         
  497 00000290         
  498 00000290         _coreGetInstructionFaultAddress_
  499 00000290         
  500 00000290 EE160F50        mrc              p15, #0, r0, c6, c0, #2
  501 00000294 E12FFF1E        bx               lr
  502 00000298         
  503 00000298         
  504 00000298         
  505 00000298         
  506 00000298         ;-------------------------------------------------------
                       ------------------------
  507 00000298         ; Clear instruction fault address register
  508 00000298         ; SourceId : CORE_SourceId_020
  509 00000298         ; DesignId : CORE_DesignId_020
  510 00000298         ; Requirements: HL_SR495
  511 00000298         
  512 00000298                 export           _coreClearInstructionFaultAddre
ss_
  513 00000298         
  514 00000298         



ARM Macro Assembler    Page 11 


  515 00000298         _coreClearInstructionFaultAddress_
  516 00000298         
  517 00000298 E92D0001        stmfd            sp!, {r0}
  518 0000029C E3A00000        mov              r0,  #0
  519 000002A0 EE060F50        mcr              p15, #0, r0, c6, c0, #2
  520 000002A4 E8BD0001        ldmfd            sp!, {r0}
  521 000002A8 E12FFF1E        bx               lr
  522 000002AC         
  523 000002AC         
  524 000002AC         
  525 000002AC         
  526 000002AC         ;-------------------------------------------------------
                       ------------------------
  527 000002AC         ; Get auxiliary data fault status register
  528 000002AC         ; SourceId : CORE_SourceId_021
  529 000002AC         ; DesignId : CORE_DesignId_021
  530 000002AC         ; Requirements: HL_SR496
  531 000002AC         
  532 000002AC                 export           _coreGetAuxiliaryDataFault_
  533 000002AC         
  534 000002AC         
  535 000002AC         _coreGetAuxiliaryDataFault_
  536 000002AC         
  537 000002AC EE150F11        mrc              p15, #0, r0, c5, c1, #0
  538 000002B0 E12FFF1E        bx               lr
  539 000002B4         
  540 000002B4         
  541 000002B4         
  542 000002B4         
  543 000002B4         ;-------------------------------------------------------
                       ------------------------
  544 000002B4         ; Clear auxiliary data fault status register
  545 000002B4         ; SourceId : CORE_SourceId_022
  546 000002B4         ; DesignId : CORE_DesignId_022
  547 000002B4         ; Requirements: HL_SR496
  548 000002B4         
  549 000002B4                 export           _coreClearAuxiliaryDataFault_
  550 000002B4         
  551 000002B4         
  552 000002B4         _coreClearAuxiliaryDataFault_
  553 000002B4         
  554 000002B4 E92D0001        stmfd            sp!, {r0}
  555 000002B8 E3A00000        mov              r0,  #0
  556 000002BC EE050F11        mcr              p15, #0, r0, c5, c1, #0
  557 000002C0 E8BD0001        ldmfd            sp!, {r0}
  558 000002C4 E12FFF1E        bx               lr
  559 000002C8         
  560 000002C8         
  561 000002C8         
  562 000002C8         
  563 000002C8         ;-------------------------------------------------------
                       ------------------------
  564 000002C8         ; Get auxiliary instruction fault status register
  565 000002C8         ; SourceId : CORE_SourceId_023
  566 000002C8         ; DesignId : CORE_DesignId_023
  567 000002C8         ; Requirements: HL_SR496
  568 000002C8         
  569 000002C8                 export           _coreGetAuxiliaryInstructionFau
lt_



ARM Macro Assembler    Page 12 


  570 000002C8         
  571 000002C8         
  572 000002C8         _coreGetAuxiliaryInstructionFault_
  573 000002C8         
  574 000002C8 EE150F31        mrc              p15, #0, r0, c5, c1, #1
  575 000002CC E12FFF1E        bx               lr
  576 000002D0         
  577 000002D0         
  578 000002D0         
  579 000002D0         ;-------------------------------------------------------
                       ------------------------
  580 000002D0         ; Clear auxiliary instruction fault status register
  581 000002D0         ; SourceId : CORE_SourceId_024
  582 000002D0         ; DesignId : CORE_DesignId_024
  583 000002D0         ; Requirements: HL_SR496
  584 000002D0         
  585 000002D0                 export           _coreClearAuxiliaryInstructionF
ault_
  586 000002D0         
  587 000002D0         
  588 000002D0         _coreClearAuxiliaryInstructionFault_
  589 000002D0         
  590 000002D0 E92D0001        stmfd            sp!, {r0}
  591 000002D4 E3A00000        mov              r0,  #0
  592 000002D8 EE150F31        mrc              p15, #0, r0, c5, c1, #1
  593 000002DC E8BD0001        ldmfd            sp!, {r0}
  594 000002E0 E12FFF1E        bx               lr
  595 000002E4         
  596 000002E4         
  597 000002E4         
  598 000002E4         ;-------------------------------------------------------
                       ------------------------
  599 000002E4         ; Disable interrupts - R4 IRQ & FIQ
  600 000002E4         ; SourceId : CORE_SourceId_025
  601 000002E4         ; DesignId : CORE_DesignId_025
  602 000002E4         ; Requirements: HL_SR494
  603 000002E4         
  604 000002E4                 export           _disable_interrupt_
  605 000002E4         
  606 000002E4         
  607 000002E4         _disable_interrupt_
  608 000002E4         
  609 000002E4 F10C00C0        cpsid            if
  610 000002E8 E12FFF1E        bx               lr
  611 000002EC         
  612 000002EC         
  613 000002EC         
  614 000002EC         ;-------------------------------------------------------
                       ------------------------
  615 000002EC         ; Disable FIQ interrupt
  616 000002EC         
  617 000002EC                 export           _disable_FIQ_interrupt_
  618 000002EC         
  619 000002EC         
  620 000002EC         _disable_FIQ_interrupt_
  621 000002EC         
  622 000002EC F10C0040        cpsid            f
  623 000002F0 E12FFF1E        bx               lr
  624 000002F4         



ARM Macro Assembler    Page 13 


  625 000002F4         
  626 000002F4         
  627 000002F4         ;-------------------------------------------------------
                       ------------------------
  628 000002F4         ; Disable FIQ interrupt
  629 000002F4         
  630 000002F4                 export           _disable_IRQ_interrupt_
  631 000002F4         
  632 000002F4         
  633 000002F4         _disable_IRQ_interrupt_
  634 000002F4         
  635 000002F4 F10C0080        cpsid            i
  636 000002F8 E12FFF1E        bx               lr
  637 000002FC         
  638 000002FC         
  639 000002FC         
  640 000002FC         ;-------------------------------------------------------
                       ------------------------
  641 000002FC         ; Enable interrupts - R4 IRQ & FIQ
  642 000002FC         
  643 000002FC                 export           _enable_interrupt_
  644 000002FC         
  645 000002FC         
  646 000002FC         _enable_interrupt_
  647 000002FC         
  648 000002FC F10800C0        cpsie            if
  649 00000300 E12FFF1E        bx               lr
  650 00000304         
  651 00000304         
  652 00000304         
  653 00000304         
  654 00000304         ;-------------------------------------------------------
                       ------------------------
  655 00000304         ; Clear ESM CCM errorss
  656 00000304         
  657 00000304                 export           _esmCcmErrorsClear_
  658 00000304         
  659 00000304         
  660 00000304         _esmCcmErrorsClear_
  661 00000304         
  662 00000304 E92D0007        stmfd            sp!, {r0-r2}
  663 00000308 E59F0048        ldr              r0, ESMSR1_REG ; load the ESMSR
                                                            1 status register a
                                                            ddress
  664 0000030C E59F2064        ldr              r2, ESMSR1_ERR_CLR
  665 00000310 E5802000        str              r2, [r0]    ; clear the ESMSR1 
                                                            register
  666 00000314         
  667 00000314 E59F0040        ldr              r0, ESMSR2_REG ; load the ESMSR
                                                            2 status register a
                                                            ddress
  668 00000318 E59F205C        ldr              r2, ESMSR2_ERR_CLR
  669 0000031C E5802000        str              r2, [r0]    ; clear the ESMSR2 
                                                            register
  670 00000320         
  671 00000320 E59F0040        ldr              r0, ESMSSR2_REG ; load the ESMS
                                                            SR2 status register
                                                             address
  672 00000324 E59F2054        ldr              r2, ESMSSR2_ERR_CLR



ARM Macro Assembler    Page 14 


  673 00000328 E5802000        str              r2, [r0]    ; clear the ESMSSR2
                                                             register
  674 0000032C         
  675 0000032C E59F0030        ldr              r0, ESMKEY_REG ; load the ESMKE
                                                            Y register address
  676 00000330 E3A02005        mov              r2, #0x5    ; load R2 with 0x5
  677 00000334 E5802000        str              r2, [r0]    ; clear the ESMKEY 
                                                            register
  678 00000338         
  679 00000338 E59F0048        ldr              r0, VIM_INTREQ ; load the INTRE
                                                            Q register address
  680 0000033C E59F2040        ldr              r2, VIM_INT_CLR
  681 00000340 E5802000        str              r2, [r0]    ; clear the INTREQ 
                                                            register
  682 00000344 E59F0020        ldr              r0, CCMR4_STAT_REG ; load the C
                                                            CMR4 status registe
                                                            r address
  683 00000348 E59F2024        ldr              r2, CCMR4_ERR_CLR
  684 0000034C E5802000        str              r2, [r0]    ; clear the CCMR4 s
                                                            tatus register
  685 00000350 E8BD0007        ldmfd            sp!, {r0-r2}
  686 00000354 E12FFF1E        bx               lr
  687 00000358         
  688 00000358 FFFFF518 
                       ESMSR1_REG
                               dcd              0xFFFFF518
  689 0000035C FFFFF51C 
                       ESMSR2_REG
                               dcd              0xFFFFF51C
  690 00000360 FFFFF520 
                       ESMSR3_REG
                               dcd              0xFFFFF520
  691 00000364 FFFFF538 
                       ESMKEY_REG
                               dcd              0xFFFFF538
  692 00000368 FFFFF53C 
                       ESMSSR2_REG
                               dcd              0xFFFFF53C
  693 0000036C FFFFF600 
                       CCMR4_STAT_REG
                               dcd              0xFFFFF600
  694 00000370 FFFFFFFF 
                       ERR_CLR_WRD
                               dcd              0xFFFFFFFF
  695 00000374 00010000 
                       CCMR4_ERR_CLR
                               dcd              0x00010000
  696 00000378 80000000 
                       ESMSR1_ERR_CLR
                               dcd              0x80000000
  697 0000037C 00000004 
                       ESMSR2_ERR_CLR
                               dcd              0x00000004
  698 00000380 00000004 
                       ESMSSR2_ERR_CLR
                               dcd              0x00000004
  699 00000384 00000001 
                       VIM_INT_CLR
                               dcd              0x00000001



ARM Macro Assembler    Page 15 


  700 00000388 FFFFFE20 
                       VIM_INTREQ
                               dcd              0xFFFFFE20
  701 0000038C         
  702 0000038C         
  703 0000038C         
  704 0000038C         ;-------------------------------------------------------
                       ------------------------
  705 0000038C         ; Work Around for Errata CORTEX-R4#57:
  706 0000038C         ; 
  707 0000038C         ; Errata Description: 
  708 0000038C         ;            Conditional VMRS APSR_Nzcv, FPSCR May Evalu
                       ate With Incorrect Flags
  709 0000038C         ; Workaround:
  710 0000038C         ;            Disable out-of-order single-precision float
                       ing point 
  711 0000038C         ;            multiply-accumulate instruction completion 
                       
  712 0000038C         
  713 0000038C                 export           _errata_CORTEXR4_57_
  714 0000038C         
  715 0000038C         
  716 0000038C         _errata_CORTEXR4_57_
  717 0000038C         
  718 0000038C E52D0004        push             {r0}
  719 00000390 EE1F0F10        mrc              p15, #0, r0, c15, c0, #0 ; Read
                                                             Secondary Auxiliar
                                                            y Control Register 
                                                            
  720 00000394 E3800801        orr              r0, r0, #0x10000 ; Set BIT 16 (
                                                            Set DOOFMACS) 
  721 00000398 EE0F0F10        mcr              p15, #0, r0, c15, c0, #0 ; Writ
                                                            e Secondary Auxilia
                                                            ry Control Register
                                                             
  722 0000039C E49D0004        pop              {r0}
  723 000003A0 E12FFF1E        bx               lr
  724 000003A4         
  725 000003A4         
  726 000003A4         ;-------------------------------------------------------
                       ------------------------
  727 000003A4         ; Work Around for Errata CORTEX-R4#66:
  728 000003A4         ; 
  729 000003A4         ; Errata Description:            
  730 000003A4         ;            Register Corruption During A Load-Multiple 
                       Instruction At 
  731 000003A4         ;            an Exception Vector
  732 000003A4         ; Workaround:
  733 000003A4         ;            Disable out-of-order completion for divide 
                       instructions in 
  734 000003A4         ;            Auxiliary Control register 
  735 000003A4         
  736 000003A4                 export           _errata_CORTEXR4_66_
  737 000003A4         
  738 000003A4         
  739 000003A4         _errata_CORTEXR4_66_
  740 000003A4         
  741 000003A4 E52D0004        push             {r0}
  742 000003A8 EE110F30        mrc              p15, #0, r0, c1, c0, #1 ; Read 



ARM Macro Assembler    Page 16 


                                                            Auxiliary Control r
                                                            egister
  743 000003AC E3800080        orr              r0, r0, #0x80 ; Set BIT 7 (Disa
                                                            ble out-of-order co
                                                            mpletion 
  744 000003B0         ; for divide instructions.)
  745 000003B0 EE010F30        mcr              p15, #0, r0, c1, c0, #1 ; Write
                                                             Auxiliary Control 
                                                            register
  746 000003B4 E49D0004        pop              {r0}
  747 000003B8 E12FFF1E        bx               lr
  748 000003BC         
  749 000003BC         ;-------------------------------------------------------
                       ------------------------
  750 000003BC         
  751 000003BC         
  752 000003BC                 end
Command Line: --debug --xref --diag_suppress=1786 --cpu=Cortex-R4F --bi --apcs=
interwork --depend=.\sys_core.d -o.\sys_core.o -I"D:\Program Files\Keil\ARM\RV3
1\INC" -I"D:\Program Files\Keil\ARM\CMSIS\Include" -I"D:\Program Files\Keil\ARM
\Inc\TI" --list=.\sys_core.lst source\sys_core.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 38 in file source\sys_core.asm
   Uses
      None
Comment: .text unused
CCMR4_ERR_CLR 00000374

Symbol: CCMR4_ERR_CLR
   Definitions
      At line 695 in file source\sys_core.asm
   Uses
      At line 683 in file source\sys_core.asm
Comment: CCMR4_ERR_CLR used once
CCMR4_STAT_REG 0000036C

Symbol: CCMR4_STAT_REG
   Definitions
      At line 693 in file source\sys_core.asm
   Uses
      At line 682 in file source\sys_core.asm
Comment: CCMR4_STAT_REG used once
ERR_CLR_WRD 00000370

Symbol: ERR_CLR_WRD
   Definitions
      At line 694 in file source\sys_core.asm
   Uses
      None
Comment: ERR_CLR_WRD unused
ESMKEY_REG 00000364

Symbol: ESMKEY_REG
   Definitions
      At line 691 in file source\sys_core.asm
   Uses
      At line 675 in file source\sys_core.asm
Comment: ESMKEY_REG used once
ESMSR1_ERR_CLR 00000378

Symbol: ESMSR1_ERR_CLR
   Definitions
      At line 696 in file source\sys_core.asm
   Uses
      At line 664 in file source\sys_core.asm
Comment: ESMSR1_ERR_CLR used once
ESMSR1_REG 00000358

Symbol: ESMSR1_REG
   Definitions
      At line 688 in file source\sys_core.asm
   Uses
      At line 663 in file source\sys_core.asm
Comment: ESMSR1_REG used once
ESMSR2_ERR_CLR 0000037C

Symbol: ESMSR2_ERR_CLR



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 697 in file source\sys_core.asm
   Uses
      At line 668 in file source\sys_core.asm
Comment: ESMSR2_ERR_CLR used once
ESMSR2_REG 0000035C

Symbol: ESMSR2_REG
   Definitions
      At line 689 in file source\sys_core.asm
   Uses
      At line 667 in file source\sys_core.asm
Comment: ESMSR2_REG used once
ESMSR3_REG 00000360

Symbol: ESMSR3_REG
   Definitions
      At line 690 in file source\sys_core.asm
   Uses
      None
Comment: ESMSR3_REG unused
ESMSSR2_ERR_CLR 00000380

Symbol: ESMSSR2_ERR_CLR
   Definitions
      At line 698 in file source\sys_core.asm
   Uses
      At line 672 in file source\sys_core.asm
Comment: ESMSSR2_ERR_CLR used once
ESMSSR2_REG 00000368

Symbol: ESMSSR2_REG
   Definitions
      At line 692 in file source\sys_core.asm
   Uses
      At line 671 in file source\sys_core.asm
Comment: ESMSSR2_REG used once
VIM_INTREQ 00000388

Symbol: VIM_INTREQ
   Definitions
      At line 700 in file source\sys_core.asm
   Uses
      At line 679 in file source\sys_core.asm
Comment: VIM_INTREQ used once
VIM_INT_CLR 00000384

Symbol: VIM_INT_CLR
   Definitions
      At line 699 in file source\sys_core.asm
   Uses
      At line 680 in file source\sys_core.asm
Comment: VIM_INT_CLR used once
_coreClearAuxiliaryDataFault_ 000002B4

Symbol: _coreClearAuxiliaryDataFault_
   Definitions
      At line 552 in file source\sys_core.asm
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 549 in file source\sys_core.asm
Comment: _coreClearAuxiliaryDataFault_ used once
_coreClearAuxiliaryInstructionFault_ 000002D0

Symbol: _coreClearAuxiliaryInstructionFault_
   Definitions
      At line 588 in file source\sys_core.asm
   Uses
      At line 585 in file source\sys_core.asm
Comment: _coreClearAuxiliaryInstructionFault_ used once
_coreClearDataFaultAddress_ 0000027C

Symbol: _coreClearDataFaultAddress_
   Definitions
      At line 478 in file source\sys_core.asm
   Uses
      At line 475 in file source\sys_core.asm
Comment: _coreClearDataFaultAddress_ used once
_coreClearDataFault_ 00000244

Symbol: _coreClearDataFault_
   Definitions
      At line 404 in file source\sys_core.asm
   Uses
      At line 401 in file source\sys_core.asm
Comment: _coreClearDataFault_ used once
_coreClearInstructionFaultAddress_ 00000298

Symbol: _coreClearInstructionFaultAddress_
   Definitions
      At line 515 in file source\sys_core.asm
   Uses
      At line 512 in file source\sys_core.asm
Comment: _coreClearInstructionFaultAddress_ used once
_coreClearInstructionFault_ 00000260

Symbol: _coreClearInstructionFault_
   Definitions
      At line 441 in file source\sys_core.asm
   Uses
      At line 438 in file source\sys_core.asm
Comment: _coreClearInstructionFault_ used once
_coreDisableEventBusExport_ 000001A8

Symbol: _coreDisableEventBusExport_
   Definitions
      At line 260 in file source\sys_core.asm
   Uses
      At line 257 in file source\sys_core.asm
Comment: _coreDisableEventBusExport_ used once
_coreDisableFlashEcc_ 0000020C

Symbol: _coreDisableFlashEcc_
   Definitions
      At line 345 in file source\sys_core.asm
   Uses
      At line 342 in file source\sys_core.asm
Comment: _coreDisableFlashEcc_ used once
_coreDisableRamEcc_ 000001D8



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


Symbol: _coreDisableRamEcc_
   Definitions
      At line 302 in file source\sys_core.asm
   Uses
      At line 299 in file source\sys_core.asm
Comment: _coreDisableRamEcc_ used once
_coreEnableEventBusExport_ 00000190

Symbol: _coreEnableEventBusExport_
   Definitions
      At line 238 in file source\sys_core.asm
   Uses
      At line 235 in file source\sys_core.asm
Comment: _coreEnableEventBusExport_ used once
_coreEnableFlashEcc_ 000001F0

Symbol: _coreEnableFlashEcc_
   Definitions
      At line 323 in file source\sys_core.asm
   Uses
      At line 320 in file source\sys_core.asm
Comment: _coreEnableFlashEcc_ used once
_coreEnableIrqVicOffset_ 00000224

Symbol: _coreEnableIrqVicOffset_
   Definitions
      At line 366 in file source\sys_core.asm
   Uses
      At line 363 in file source\sys_core.asm
Comment: _coreEnableIrqVicOffset_ used once
_coreEnableRamEcc_ 000001C0

Symbol: _coreEnableRamEcc_
   Definitions
      At line 281 in file source\sys_core.asm
   Uses
      At line 278 in file source\sys_core.asm
Comment: _coreEnableRamEcc_ used once
_coreEnableVfp_ 00000178

Symbol: _coreEnableVfp_
   Definitions
      At line 218 in file source\sys_core.asm
   Uses
      At line 215 in file source\sys_core.asm
Comment: _coreEnableVfp_ used once
_coreGetAuxiliaryDataFault_ 000002AC

Symbol: _coreGetAuxiliaryDataFault_
   Definitions
      At line 535 in file source\sys_core.asm
   Uses
      At line 532 in file source\sys_core.asm
Comment: _coreGetAuxiliaryDataFault_ used once
_coreGetAuxiliaryInstructionFault_ 000002C8

Symbol: _coreGetAuxiliaryInstructionFault_
   Definitions



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 572 in file source\sys_core.asm
   Uses
      At line 569 in file source\sys_core.asm
Comment: _coreGetAuxiliaryInstructionFault_ used once
_coreGetDataFaultAddress_ 00000274

Symbol: _coreGetDataFaultAddress_
   Definitions
      At line 461 in file source\sys_core.asm
   Uses
      At line 458 in file source\sys_core.asm
Comment: _coreGetDataFaultAddress_ used once
_coreGetDataFault_ 0000023C

Symbol: _coreGetDataFault_
   Definitions
      At line 387 in file source\sys_core.asm
   Uses
      At line 384 in file source\sys_core.asm
Comment: _coreGetDataFault_ used once
_coreGetInstructionFaultAddress_ 00000290

Symbol: _coreGetInstructionFaultAddress_
   Definitions
      At line 498 in file source\sys_core.asm
   Uses
      At line 495 in file source\sys_core.asm
Comment: _coreGetInstructionFaultAddress_ used once
_coreGetInstructionFault_ 00000258

Symbol: _coreGetInstructionFault_
   Definitions
      At line 424 in file source\sys_core.asm
   Uses
      At line 421 in file source\sys_core.asm
Comment: _coreGetInstructionFault_ used once
_coreInitRegisters_ 00000000

Symbol: _coreInitRegisters_
   Definitions
      At line 51 in file source\sys_core.asm
   Uses
      At line 47 in file source\sys_core.asm
Comment: _coreInitRegisters_ used once
_coreInitStackPointer_ 0000010C

Symbol: _coreInitStackPointer_
   Definitions
      At line 147 in file source\sys_core.asm
   Uses
      At line 144 in file source\sys_core.asm
Comment: _coreInitStackPointer_ used once
_disable_FIQ_interrupt_ 000002EC

Symbol: _disable_FIQ_interrupt_
   Definitions
      At line 620 in file source\sys_core.asm
   Uses
      At line 617 in file source\sys_core.asm



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Comment: _disable_FIQ_interrupt_ used once
_disable_IRQ_interrupt_ 000002F4

Symbol: _disable_IRQ_interrupt_
   Definitions
      At line 633 in file source\sys_core.asm
   Uses
      At line 630 in file source\sys_core.asm
Comment: _disable_IRQ_interrupt_ used once
_disable_interrupt_ 000002E4

Symbol: _disable_interrupt_
   Definitions
      At line 607 in file source\sys_core.asm
   Uses
      At line 604 in file source\sys_core.asm
Comment: _disable_interrupt_ used once
_enable_interrupt_ 000002FC

Symbol: _enable_interrupt_
   Definitions
      At line 646 in file source\sys_core.asm
   Uses
      At line 643 in file source\sys_core.asm
Comment: _enable_interrupt_ used once
_errata_CORTEXR4_57_ 0000038C

Symbol: _errata_CORTEXR4_57_
   Definitions
      At line 716 in file source\sys_core.asm
   Uses
      At line 713 in file source\sys_core.asm
Comment: _errata_CORTEXR4_57_ used once
_errata_CORTEXR4_66_ 000003A4

Symbol: _errata_CORTEXR4_66_
   Definitions
      At line 739 in file source\sys_core.asm
   Uses
      At line 736 in file source\sys_core.asm
Comment: _errata_CORTEXR4_66_ used once
_esmCcmErrorsClear_ 00000304

Symbol: _esmCcmErrorsClear_
   Definitions
      At line 660 in file source\sys_core.asm
   Uses
      At line 657 in file source\sys_core.asm
Comment: _esmCcmErrorsClear_ used once
_getCPSRValue_ 00000158

Symbol: _getCPSRValue_
   Definitions
      At line 181 in file source\sys_core.asm
   Uses
      At line 178 in file source\sys_core.asm
Comment: _getCPSRValue_ used once
_gotoCPUIdle_ 00000160




ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

Symbol: _gotoCPUIdle_
   Definitions
      At line 197 in file source\sys_core.asm
   Uses
      At line 194 in file source\sys_core.asm
Comment: _gotoCPUIdle_ used once
abortSp 00000150

Symbol: abortSp
   Definitions
      At line 167 in file source\sys_core.asm
   Uses
      At line 156 in file source\sys_core.asm
Comment: abortSp used once
fiqSp 00000148

Symbol: fiqSp
   Definitions
      At line 165 in file source\sys_core.asm
   Uses
      At line 150 in file source\sys_core.asm
Comment: fiqSp used once
irqSp 0000014C

Symbol: irqSp
   Definitions
      At line 166 in file source\sys_core.asm
   Uses
      At line 152 in file source\sys_core.asm
Comment: irqSp used once
next1 000000FC

Symbol: next1
   Definitions
      At line 126 in file source\sys_core.asm
   Uses
      At line 125 in file source\sys_core.asm
Comment: next1 used once
next2 00000100

Symbol: next2
   Definitions
      At line 128 in file source\sys_core.asm
   Uses
      At line 127 in file source\sys_core.asm
Comment: next2 used once
next3 00000104

Symbol: next3
   Definitions
      At line 130 in file source\sys_core.asm
   Uses
      At line 129 in file source\sys_core.asm
Comment: next3 used once
next4 00000108

Symbol: next4
   Definitions
      At line 132 in file source\sys_core.asm



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 131 in file source\sys_core.asm
Comment: next4 used once
svcSp 00000144

Symbol: svcSp
   Definitions
      At line 164 in file source\sys_core.asm
   Uses
      At line 154 in file source\sys_core.asm
Comment: svcSp used once
undefSp 00000154

Symbol: undefSp
   Definitions
      At line 168 in file source\sys_core.asm
   Uses
      At line 158 in file source\sys_core.asm
Comment: undefSp used once
userSp 00000140

Symbol: userSp
   Definitions
      At line 163 in file source\sys_core.asm
   Uses
      At line 160 in file source\sys_core.asm
Comment: userSp used once
55 symbols
386 symbols in table
