<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\TMS570ls3137.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\TMS570ls3137.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Mon Oct 16 19:33:06 2017
<BR><P>
<H3>Maximum Stack Usage =        120 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; bulk_erase_character &rArr; WriteFM4Bytes &rArr; WriteFMByte &rArr; spiTransmitData
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[9]">resetEntry</a>
 <LI><a href="#[a8]">_dabort</a>
 <LI><a href="#[b]">_coreInitRegisters_</a>
 <LI><a href="#[c]">_coreInitStackPointer_</a>
 <LI><a href="#[142]">_getCPSRValue_</a>
 <LI><a href="#[88]">_gotoCPUIdle_</a>
 <LI><a href="#[143]">_coreEnableVfp_</a>
 <LI><a href="#[e]">_coreEnableEventBusExport_</a>
 <LI><a href="#[144]">_coreDisableEventBusExport_</a>
 <LI><a href="#[1b]">_coreEnableRamEcc_</a>
 <LI><a href="#[18]">_coreDisableRamEcc_</a>
 <LI><a href="#[145]">_coreEnableFlashEcc_</a>
 <LI><a href="#[146]">_coreDisableFlashEcc_</a>
 <LI><a href="#[2d]">_coreEnableIrqVicOffset_</a>
 <LI><a href="#[147]">_coreGetDataFault_</a>
 <LI><a href="#[148]">_coreClearDataFault_</a>
 <LI><a href="#[149]">_coreGetInstructionFault_</a>
 <LI><a href="#[14a]">_coreClearInstructionFault_</a>
 <LI><a href="#[14b]">_coreGetDataFaultAddress_</a>
 <LI><a href="#[14c]">_coreClearDataFaultAddress_</a>
 <LI><a href="#[14d]">_coreGetInstructionFaultAddress_</a>
 <LI><a href="#[14e]">_coreClearInstructionFaultAddress_</a>
 <LI><a href="#[14f]">_coreGetAuxiliaryDataFault_</a>
 <LI><a href="#[150]">_coreClearAuxiliaryDataFault_</a>
 <LI><a href="#[151]">_coreGetAuxiliaryInstructionFault_</a>
 <LI><a href="#[152]">_coreClearAuxiliaryInstructionFault_</a>
 <LI><a href="#[153]">_disable_interrupt_</a>
 <LI><a href="#[154]">_disable_FIQ_interrupt_</a>
 <LI><a href="#[155]">_disable_IRQ_interrupt_</a>
 <LI><a href="#[6c]">_enable_interrupt_</a>
 <LI><a href="#[d]">_esmCcmErrorsClear_</a>
 <LI><a href="#[10]">_errata_CORTEXR4_57_</a>
 <LI><a href="#[f]">_errata_CORTEXR4_66_</a>
 <LI><a href="#[156]">_pmuInit_</a>
 <LI><a href="#[9a]">_pmuEnableCountersGlobal_</a>
 <LI><a href="#[9f]">_pmuDisableCountersGlobal_</a>
 <LI><a href="#[157]">_pmuResetCycleCounter_</a>
 <LI><a href="#[158]">_pmuResetEventCounters_</a>
 <LI><a href="#[9b]">_pmuResetCounters_</a>
 <LI><a href="#[9c]">_pmuStartCounters_</a>
 <LI><a href="#[9d]">_pmuStopCounters_</a>
 <LI><a href="#[159]">_pmuSetCountEvent_</a>
 <LI><a href="#[9e]">_pmuGetCycleCount_</a>
 <LI><a href="#[15a]">_pmuGetEventCount_</a>
 <LI><a href="#[15b]">_pmuGetOverflow_</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">adc1Group1Interrupt</a> from adc.o(.text) referenced from sys_vim.o(.constdata)
 <LI><a href="#[5]">esmHighInterrupt</a> from esm.o(.text) referenced from sys_vim.o(.constdata)
 <LI><a href="#[6]">linHighLevelInterrupt</a> from sci.o(.text) referenced from sys_vim.o(.constdata)
 <LI><a href="#[4]">phantomInterrupt</a> from sys_phantom.o(.text) referenced 93 times from sys_vim.o(.constdata)
 <LI><a href="#[a0]">vimParityErrorHandler</a> from sys_vim.o(.text) referenced from sys_vim.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[9]"></a>resetEntry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_intvecs.o(intvecs), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = resetEntry &rArr; _c_int00 &rArr; checkRAMECC
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dabort
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phantomInterrupt
</UL>

<P><STRONG><a name="[a]"></a>_c_int00</STRONG> (ARM, 624 bytes, Stack size 0 bytes, sys_startup.o(reset), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _c_int00 &rArr; checkRAMECC
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmInit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vimInit
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_esmCcmErrorsClear_
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_errata_CORTEXR4_66_
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_errata_CORTEXR4_57_
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_coreInitStackPointer_
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_coreInitRegisters_
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_coreEnableIrqVicOffset_
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_coreEnableEventBusExport_
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_coreEnableRamEcc_
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_coreDisableRamEcc_
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableParity
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableParity
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_PBIST_4
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbistFail
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRAMECC
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibspi5ParityCheck
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibspi3ParityCheck
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibspi1ParityCheck
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can3ParityCheck
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2ParityCheck
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1ParityCheck
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2ParityCheck
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1ParityCheck
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu2ParityCheck
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;het2ParityCheck
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu1ParityCheck
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;het1ParityCheck
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaParityCheck
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vimParityCheck
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbistIsTestPassed
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbistIsTestCompleted
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbistStop
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbistRun
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbistSelfCheck
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetEntry
</UL>

<P><STRONG><a name="[8]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via BLX)
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[30]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main (via BLX)
</UL>

<P><STRONG><a name="[32]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ad]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[ae]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[af]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[b0]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[b1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[36]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[33]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[b2]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[be]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[3b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[c5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[c7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[c9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[ca]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[31]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main (via BLX)
</UL>

<P><STRONG><a name="[cb]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[cc]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry7.o(.ARM.Collect$$rtentry$$00000007))

<P><STRONG><a name="[35]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[cd]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[37]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; bulk_erase_character &rArr; WriteFM4Bytes &rArr; WriteFMByte &rArr; spiTransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via BLX)
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ce]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ac]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[cf]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[44]"></a>wait</STRONG> (ARM, 52 bytes, Stack size 12 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wait
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MysciSend
</UL>

<P><STRONG><a name="[72]"></a>spi1sendByte</STRONG> (ARM, 52 bytes, Stack size 0 bytes, sys_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>MyGioSetPortA</STRONG> (ARM, 88 bytes, Stack size 8 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MyGioSetPortA
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetPort
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashID
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bulk_erase_character
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bulk_erase_primitive
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
</UL>

<P><STRONG><a name="[71]"></a>spi2sendByte</STRONG> (ARM, 36 bytes, Stack size 0 bytes, sys_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>absf</STRONG> (ARM, 32 bytes, Stack size 0 bytes, sys_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>CacuSecondTime</STRONG> (ARM, 548 bytes, Stack size 48 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CacuSecondTime
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>MysciSend2Bytes</STRONG> (ARM, 108 bytes, Stack size 0 bytes, sys_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MysciSend
</UL>

<P><STRONG><a name="[43]"></a>MysciSend</STRONG> (ARM, 148 bytes, Stack size 8 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MysciSend &rArr; sciEnableNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciEnableNotification
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciDisableNotification
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MysciSend2Bytes
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>WriteFMByte</STRONG> (ARM, 124 bytes, Stack size 24 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteFMByte &rArr; spiTransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitData
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM4Bytes
</UL>

<P><STRONG><a name="[4b]"></a>FMWREN</STRONG> (ARM, 88 bytes, Stack size 8 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FMWREN &rArr; spiTransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitData
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM4Bytes
</UL>

<P><STRONG><a name="[4f]"></a>MysciSendByte</STRONG> (ARM, 52 bytes, Stack size 0 bytes, sys_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashID
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LB
</UL>

<P><STRONG><a name="[4c]"></a>ReadByte</STRONG> (ARM, 296 bytes, Stack size 40 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadByte &rArr; spiTransmitAndReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitAndReceiveData
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetPort
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyGioSetPortA
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LB
</UL>

<P><STRONG><a name="[4e]"></a>read_LB</STRONG> (ARM, 108 bytes, Stack size 24 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = read_LB &rArr; ReadByte &rArr; spiTransmitAndReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MysciSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>bulk_erase_primitive</STRONG> (ARM, 4952 bytes, Stack size 40 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bulk_erase_primitive &rArr; spiTransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitData
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitAndReceiveData
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetPort
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyGioSetPortA
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>WriteFM4Bytes</STRONG> (ARM, 108 bytes, Stack size 16 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteFM4Bytes &rArr; WriteFMByte &rArr; spiTransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMWREN
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFMByte
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bulk_erase_character
</UL>

<P><STRONG><a name="[52]"></a>bulk_erase_character</STRONG> (ARM, 436 bytes, Stack size 40 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bulk_erase_character &rArr; WriteFM4Bytes &rArr; WriteFMByte &rArr; spiTransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitData
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitAndReceiveData
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetPort
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFM4Bytes
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyGioSetPortA
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>CacuClockTime</STRONG> (ARM, 1080 bytes, Stack size 32 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CacuClockTime
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via BLX)
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>ReadFMByte</STRONG> (ARM, 152 bytes, Stack size 32 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadFMByte &rArr; spiTransmitAndReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitAndReceiveData
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>spi1transmitByte</STRONG> (ARM, 60 bytes, Stack size 0 bytes, sys_main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadAddr
</UL>

<P><STRONG><a name="[56]"></a>spiReadAddr</STRONG> (ARM, 88 bytes, Stack size 4 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = spiReadAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1transmitByte
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery
</UL>

<P><STRONG><a name="[58]"></a>StartAdd</STRONG> (ARM, 100 bytes, Stack size 16 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StartAdd &rArr; spiTransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitData
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery
</UL>

<P><STRONG><a name="[59]"></a>recovery</STRONG> (ARM, 13848 bytes, Stack size 8 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = recovery &rArr; StartAdd &rArr; spiTransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSetStart
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSetSlaveAdd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSetOwnAdd
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSendByte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cIsBusBusy
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadAddr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1transmitByte
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>ADC_init</STRONG> (ARM, 48 bytes, Stack size 8 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_init &rArr; adcStartConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcStartConversion
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcEnableNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>UART_init</STRONG> (ARM, 60 bytes, Stack size 8 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_init &rArr; sciEnableNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciInit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciEnableNotification
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>ReadFlashID</STRONG> (ARM, 360 bytes, Stack size 32 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ReadFlashID &rArr; spiTransmitAndReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitAndReceiveData
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciEnableNotification
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciDisableNotification
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetPort
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MysciSendByte
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyGioSetPortA
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_init
</UL>

<P><STRONG><a name="[67]"></a>SPI_init</STRONG> (ARM, 92 bytes, Stack size 16 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_init &rArr; ReadFlashID &rArr; spiTransmitAndReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetPort
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashID
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyGioSetPortA
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>main</STRONG> (ARM, 210320 bytes, Stack size 16 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = main &rArr; bulk_erase_character &rArr; WriteFM4Bytes &rArr; WriteFMByte &rArr; spiTransmitData
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciEnableNotification
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciDisableNotification
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSetStart
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSetSlaveAdd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSetOwnAdd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSetDirection
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cSendByte
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cIsBusBusy
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2cInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hetInit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetPort
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetDirection
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_enable_interrupt_
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFMByte
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacuClockTime
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bulk_erase_character
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bulk_erase_primitive
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LB
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMWREN
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFMByte
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MysciSend
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MysciSend2Bytes
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacuSecondTime
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi2sendByte
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyGioSetPortA
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1sendByte
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f (via BLX)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main (via BLX)
</UL>

<P><STRONG><a name="[73]"></a>ReadStatus</STRONG> (ARM, 244 bytes, Stack size 24 bytes, sys_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitAndReceiveData
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetPort
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyGioSetPortA
</UL>

<P><STRONG><a name="[74]"></a>WriteByte</STRONG> (ARM, 1008 bytes, Stack size 48 bytes, sys_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitData
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitAndReceiveData
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetPort
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyGioSetPortA
</UL>

<P><STRONG><a name="[75]"></a>WREN</STRONG> (ARM, 208 bytes, Stack size 16 bytes, sys_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitData
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetPort
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyGioSetPortA
</UL>

<P><STRONG><a name="[d0]"></a>abs</STRONG> (ARM, 28 bytes, Stack size 0 bytes, sys_main.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>adcNotification</STRONG> (ARM, 1816 bytes, Stack size 16 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adcNotification &rArr; adcGetData
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGetData
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1Group1Interrupt
</UL>

<P><STRONG><a name="[78]"></a>sciNotification</STRONG> (ARM, 60 bytes, Stack size 16 bytes, sys_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sciNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciReceiveByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linHighLevelInterrupt
</UL>

<P><STRONG><a name="[7a]"></a>ReadFMStatus</STRONG> (ARM, 104 bytes, Stack size 16 bytes, sys_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTransmitAndReceiveData
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gioSetBit
</UL>

<P><STRONG><a name="[61]"></a>adcInit</STRONG> (ARM, 448 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[62]"></a>adcStartConversion</STRONG> (ARM, 80 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adcStartConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[d1]"></a>adcStopConversion</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>adcResetFiFo</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>adcGetData</STRONG> (ARM, 252 bytes, Stack size 24 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adcGetData
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcNotification
</UL>

<P><STRONG><a name="[d3]"></a>adcIsFifoFull</STRONG> (ARM, 20 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>adcIsConversionComplete</STRONG> (ARM, 20 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>adcCalibration</STRONG> (ARM, 360 bytes, Stack size 40 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via BLX)
</UL>

<P><STRONG><a name="[d5]"></a>adcMidPointCalibration</STRONG> (ARM, 292 bytes, Stack size 24 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>adcEnableNotification</STRONG> (ARM, 48 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[d6]"></a>adcDisableNotification</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>adcSetEVTPin</STRONG> (ARM, 8 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>adcGetEVTPin</STRONG> (ARM, 12 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>adc1GetConfigValue</STRONG> (ARM, 332 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>adc2GetConfigValue</STRONG> (ARM, 332 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>adc1Group1Interrupt</STRONG> (ARM, 36 bytes, Stack size 24 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = adc1Group1Interrupt &rArr; adcNotification &rArr; adcGetData
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcNotification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_vim.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>esmInit</STRONG> (ARM, 180 bytes, Stack size 0 bytes, esm.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[db]"></a>esmError</STRONG> (ARM, 12 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>esmEnableError</STRONG> (ARM, 20 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>esmDisableError</STRONG> (ARM, 20 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>esmTriggerErrorPinReset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>esmActivateNormalOperation</STRONG> (ARM, 12 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>esmEnableInterrupt</STRONG> (ARM, 20 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>esmDisableInterrupt</STRONG> (ARM, 20 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>esmSetInterruptLevel</STRONG> (ARM, 60 bytes, Stack size 20 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>esmClearStatus</STRONG> (ARM, 28 bytes, Stack size 8 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>esmClearStatusBuffer</STRONG> (ARM, 20 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>esmSetCounterPreloadValue</STRONG> (ARM, 16 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>esmGetStatus</STRONG> (ARM, 64 bytes, Stack size 24 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>esmGetStatusBuffer</STRONG> (ARM, 56 bytes, Stack size 20 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>esmEnterSelfTest</STRONG> (ARM, 100 bytes, Stack size 8 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>esmSelfTestStatus</STRONG> (ARM, 56 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>esmGetConfigValue</STRONG> (ARM, 156 bytes, Stack size 0 bytes, esm.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>esmHighInterrupt</STRONG> (ARM, 216 bytes, Stack size 32 bytes, esm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = esmHighInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmGroup2Notification
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmGroup1Notification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_vim.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>gioInit</STRONG> (ARM, 176 bytes, Stack size 0 bytes, gio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>gioSetDirection</STRONG> (ARM, 8 bytes, Stack size 0 bytes, gio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>gioSetBit</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFMStatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashID
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdd
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFMByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bulk_erase_character
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bulk_erase_primitive
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMWREN
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFMByte
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MysciSend
</UL>

<P><STRONG><a name="[40]"></a>gioSetPort</STRONG> (ARM, 8 bytes, Stack size 0 bytes, gio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashID
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bulk_erase_character
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bulk_erase_primitive
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyGioSetPortA
</UL>

<P><STRONG><a name="[3f]"></a>gioGetBit</STRONG> (ARM, 20 bytes, Stack size 0 bytes, gio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyGioSetPortA
</UL>

<P><STRONG><a name="[eb]"></a>gioGetPort</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gio.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>gioToggleBit</STRONG> (ARM, 48 bytes, Stack size 0 bytes, gio.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>gioEnableNotification</STRONG> (ARM, 68 bytes, Stack size 0 bytes, gio.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>gioDisableNotification</STRONG> (ARM, 68 bytes, Stack size 0 bytes, gio.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>gioGetConfigValue</STRONG> (ARM, 228 bytes, Stack size 0 bytes, gio.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>i2cInit</STRONG> (ARM, 208 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery
</UL>

<P><STRONG><a name="[5b]"></a>i2cSetOwnAdd</STRONG> (ARM, 8 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery
</UL>

<P><STRONG><a name="[5d]"></a>i2cSetSlaveAdd</STRONG> (ARM, 8 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery
</UL>

<P><STRONG><a name="[f0]"></a>i2cSetBaudrate</STRONG> (ARM, 152 bytes, Stack size 20 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>i2cSetStart</STRONG> (ARM, 16 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery
</UL>

<P><STRONG><a name="[f1]"></a>i2cSetStop</STRONG> (ARM, 16 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>i2cSetCount</STRONG> (ARM, 8 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>i2cIsTxReady</STRONG> (ARM, 16 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>i2cSendByte</STRONG> (ARM, 24 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery
</UL>

<P><STRONG><a name="[f4]"></a>i2cSend</STRONG> (ARM, 132 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>i2cIsRxReady</STRONG> (ARM, 16 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>i2cIsStopDetected</STRONG> (ARM, 16 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>i2cRxError</STRONG> (ARM, 24 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>i2cClearSCD</STRONG> (ARM, 12 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>i2cReceiveByte</STRONG> (ARM, 28 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>i2cReceive</STRONG> (ARM, 116 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>i2cEnableLoopback</STRONG> (ARM, 16 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>i2cDisableLoopback</STRONG> (ARM, 16 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>i2cEnableNotification</STRONG> (ARM, 36 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>i2cDisableNotification</STRONG> (ARM, 48 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>i2cSetMode</STRONG> (ARM, 16 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>i2cGetConfigValue</STRONG> (ARM, 292 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>i2cSetDirection</STRONG> (ARM, 28 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>i2cIsMasterReady</STRONG> (ARM, 36 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>i2cIsBusBusy</STRONG> (ARM, 40 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recovery
</UL>

<P><STRONG><a name="[7d]"></a>esmGroup1Notification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, notification.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmHighInterrupt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vimParityErrorHandler
</UL>

<P><STRONG><a name="[7e]"></a>esmGroup2Notification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, notification.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmHighInterrupt
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vimParityErrorHandler
</UL>

<P><STRONG><a name="[99]"></a>memoryPort0TestFailNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, notification.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbistFail
</UL>

<P><STRONG><a name="[102]"></a>memoryPort1TestFailNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, notification.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>gioNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, notification.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>i2cNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, notification.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>mibspiNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, notification.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>mibspiGroupNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, notification.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>spiNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, notification.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>spiEndNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, notification.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>pwmNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, notification.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>edgeNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, notification.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>hetNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, notification.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>dmaGroupANotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, notification.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>muxInit</STRONG> (ARM, 816 bytes, Stack size 0 bytes, pinmux.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[10d]"></a>pinmuxGetConfigValue</STRONG> (ARM, 384 bytes, Stack size 0 bytes, pinmux.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>sciInit</STRONG> (ARM, 196 bytes, Stack size 0 bytes, sci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
</UL>

<P><STRONG><a name="[10e]"></a>sciSetFunctional</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>sciSetBaudrate</STRONG> (ARM, 88 bytes, Stack size 8 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>sciIsTxReady</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>sciSendByte</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>sciSend</STRONG> (ARM, 192 bytes, Stack size 20 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>sciIsRxReady</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>sciIsIdleDetected</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>sciRxError</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>sciReceiveByte</STRONG> (ARM, 32 bytes, Stack size 0 bytes, sci.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciNotification
</UL>

<P><STRONG><a name="[116]"></a>sciReceive</STRONG> (ARM, 160 bytes, Stack size 12 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>sciEnableLoopback</STRONG> (ARM, 24 bytes, Stack size 0 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>sciDisableLoopback</STRONG> (ARM, 12 bytes, Stack size 0 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>sciEnableNotification</STRONG> (ARM, 76 bytes, Stack size 12 bytes, sci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sciEnableNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashID
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MysciSend
</UL>

<P><STRONG><a name="[46]"></a>sciDisableNotification</STRONG> (ARM, 76 bytes, Stack size 12 bytes, sci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sciDisableNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashID
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MysciSend
</UL>

<P><STRONG><a name="[119]"></a>scilinGetConfigValue</STRONG> (ARM, 224 bytes, Stack size 0 bytes, sci.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>linHighLevelInterrupt</STRONG> (ARM, 348 bytes, Stack size 32 bytes, sci.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = linHighLevelInterrupt &rArr; sciNotification
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sciNotification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_vim.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>hetInit</STRONG> (ARM, 368 bytes, Stack size 8 bytes, het.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hetInit &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>pwmStart</STRONG> (ARM, 40 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>pwmStop</STRONG> (ARM, 40 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>pwmSetDuty</STRONG> (ARM, 228 bytes, Stack size 32 bytes, het.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv (via BLX)
</UL>

<P><STRONG><a name="[82]"></a>pwmSetSignal</STRONG> (ARM, 324 bytes, Stack size 48 bytes, het.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv (via BLX)
</UL>

<P><STRONG><a name="[83]"></a>pwmGetSignal</STRONG> (ARM, 220 bytes, Stack size 24 bytes, het.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv (via BLX)
</UL>

<P><STRONG><a name="[11c]"></a>pwmEnableNotification</STRONG> (ARM, 28 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>pwmDisableNotification</STRONG> (ARM, 16 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>edgeResetCounter</STRONG> (ARM, 20 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>edgeGetCounter</STRONG> (ARM, 24 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>edgeEnableNotification</STRONG> (ARM, 28 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>edgeDisableNotification</STRONG> (ARM, 16 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>capGetSignal</STRONG> (ARM, 148 bytes, Stack size 24 bytes, het.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv (via BLX)
</UL>

<P><STRONG><a name="[122]"></a>hetResetTimestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>hetGetTimestamp</STRONG> (ARM, 12 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>het1GetConfigValue</STRONG> (ARM, 260 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>het2GetConfigValue</STRONG> (ARM, 252 bytes, Stack size 0 bytes, het.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>spiInit</STRONG> (ARM, 556 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_init
</UL>

<P><STRONG><a name="[126]"></a>spiSetFunctional</STRONG> (ARM, 8 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>spiReceiveData</STRONG> (ARM, 184 bytes, Stack size 20 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>spiGetData</STRONG> (ARM, 176 bytes, Stack size 20 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>spiTransmitData</STRONG> (ARM, 192 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spiTransmitData
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WREN
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartAdd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bulk_erase_character
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bulk_erase_primitive
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMWREN
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFMByte
</UL>

<P><STRONG><a name="[129]"></a>spiSendData</STRONG> (ARM, 176 bytes, Stack size 20 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>spiTransmitAndReceiveData</STRONG> (ARM, 200 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spiTransmitAndReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFMStatus
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteByte
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFlashID
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFMByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bulk_erase_character
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bulk_erase_primitive
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadByte
</UL>

<P><STRONG><a name="[12a]"></a>spiSendAndGetData</STRONG> (ARM, 216 bytes, Stack size 20 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>SpiTxStatus</STRONG> (ARM, 112 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>SpiRxStatus</STRONG> (ARM, 112 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>spiEnableLoopback</STRONG> (ARM, 24 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>spiDisableLoopback</STRONG> (ARM, 12 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>spiEnableNotification</STRONG> (ARM, 20 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>spiDisableNotification</STRONG> (ARM, 16 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>spi1GetConfigValue</STRONG> (ARM, 264 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>spi2GetConfigValue</STRONG> (ARM, 264 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>phantomInterrupt</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys_phantom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetEntry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_vim.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>selftestFailNotification</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_PBIST_4
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcBus1ParityCheck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRAMUERRTest
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRAMAddrParity
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkPLL1Slip
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFlashEEPROMECC
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkClockMonitor
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRAMECC
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibspi5ParityCheck
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibspi3ParityCheck
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mibspi1ParityCheck
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can3ParityCheck
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2ParityCheck
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1ParityCheck
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc2ParityCheck
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1ParityCheck
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu2ParityCheck
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;het2ParityCheck
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htu1ParityCheck
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;het1ParityCheck
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmaParityCheck
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vimParityCheck
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkFlashECC
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkB1RAMECC
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkB0RAMECC
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcECCcheck
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efcCheck
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbistSelfCheck
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ccmSelfCheck
</UL>

<P><STRONG><a name="[85]"></a>ccmSelfCheck</STRONG> (ARM, 304 bytes, Stack size 4 bytes, sys_selftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>

<P><STRONG><a name="[1a]"></a>memoryInit</STRONG> (ARM, 60 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[87]"></a>stcSelfCheck</STRONG> (ARM, 116 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gotoCPUIdle_
</UL>

<P><STRONG><a name="[89]"></a>cpuSelfTest</STRONG> (ARM, 124 bytes, Stack size 24 bytes, sys_selftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gotoCPUIdle_
</UL>

<P><STRONG><a name="[13]"></a>pbistSelfCheck</STRONG> (ARM, 428 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbistSelfCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[14]"></a>pbistRun</STRONG> (ARM, 160 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbistRun
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[19]"></a>pbistStop</STRONG> (ARM, 48 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[15]"></a>pbistIsTestCompleted</STRONG> (ARM, 16 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[16]"></a>pbistIsTestPassed</STRONG> (ARM, 32 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[98]"></a>pbistPortTestStatus</STRONG> (ARM, 56 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbistFail
</UL>

<P><STRONG><a name="[8c]"></a>efcSelfTest</STRONG> (ARM, 32 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efcCheck
</UL>

<P><STRONG><a name="[8b]"></a>efcStuckZeroTest</STRONG> (ARM, 140 bytes, Stack size 12 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = efcStuckZeroTest
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efcCheck
</UL>

<P><STRONG><a name="[8a]"></a>efcCheck</STRONG> (ARM, 104 bytes, Stack size 12 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = efcCheck &rArr; efcStuckZeroTest
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efcStuckZeroTest
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efcSelfTest
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[a4]"></a>checkefcSelfTest</STRONG> (ARM, 108 bytes, Stack size 12 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = checkefcSelfTest
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[8d]"></a>fmcECCcheck</STRONG> (ARM, 168 bytes, Stack size 12 bytes, sys_selftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcBus2Check
</UL>

<P><STRONG><a name="[8e]"></a>fmcBus2Check</STRONG> (ARM, 64 bytes, Stack size 4 bytes, sys_selftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmcECCcheck
</UL>

<P><STRONG><a name="[8f]"></a>checkB0RAMECC</STRONG> (ARM, 396 bytes, Stack size 48 bytes, sys_selftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_coreEnableRamEcc_
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_coreDisableRamEcc_
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>

<P><STRONG><a name="[90]"></a>checkB1RAMECC</STRONG> (ARM, 396 bytes, Stack size 48 bytes, sys_selftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_coreEnableRamEcc_
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_coreDisableRamEcc_
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>

<P><STRONG><a name="[91]"></a>checkFlashECC</STRONG> (ARM, 200 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>

<P><STRONG><a name="[a9]"></a>custom_dabort</STRONG> (ARM, 4 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dabort
</UL>

<P><STRONG><a name="[133]"></a>stcSelfCheckFail</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>cpuSelfTestFail</STRONG> (ARM, 8 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>vimParityCheck</STRONG> (ARM, 160 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vimParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[29]"></a>dmaParityCheck</STRONG> (ARM, 160 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dmaParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[1f]"></a>het1ParityCheck</STRONG> (ARM, 160 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = het1ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[20]"></a>htu1ParityCheck</STRONG> (ARM, 172 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = htu1ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[21]"></a>het2ParityCheck</STRONG> (ARM, 336 bytes, Stack size 12 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = het2ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[22]"></a>htu2ParityCheck</STRONG> (ARM, 172 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = htu2ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[23]"></a>adc1ParityCheck</STRONG> (ARM, 160 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc1ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[24]"></a>adc2ParityCheck</STRONG> (ARM, 160 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc2ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[25]"></a>can1ParityCheck</STRONG> (ARM, 196 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can1ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[26]"></a>can2ParityCheck</STRONG> (ARM, 196 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can2ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[27]"></a>can3ParityCheck</STRONG> (ARM, 188 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can3ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[2a]"></a>mibspi1ParityCheck</STRONG> (ARM, 244 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mibspi1ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[2b]"></a>mibspi3ParityCheck</STRONG> (ARM, 244 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mibspi3ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[2c]"></a>mibspi5ParityCheck</STRONG> (ARM, 244 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mibspi5ParityCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[1c]"></a>checkRAMECC</STRONG> (ARM, 516 bytes, Stack size 64 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = checkRAMECC
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_coreEnableRamEcc_
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_coreDisableRamEcc_
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[92]"></a>checkClockMonitor</STRONG> (ARM, 180 bytes, Stack size 4 bytes, sys_selftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>

<P><STRONG><a name="[93]"></a>checkFlashEEPROMECC</STRONG> (ARM, 348 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>

<P><STRONG><a name="[94]"></a>checkPLL1Slip</STRONG> (ARM, 224 bytes, Stack size 4 bytes, sys_selftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>

<P><STRONG><a name="[135]"></a>checkPLL2Slip</STRONG> (ARM, 172 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>checkRAMAddrParity</STRONG> (ARM, 196 bytes, Stack size 16 bytes, sys_selftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>

<P><STRONG><a name="[96]"></a>checkRAMUERRTest</STRONG> (ARM, 424 bytes, Stack size 4 bytes, sys_selftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>

<P><STRONG><a name="[97]"></a>fmcBus1ParityCheck</STRONG> (ARM, 264 bytes, Stack size 8 bytes, sys_selftest.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>

<P><STRONG><a name="[17]"></a>pbistFail</STRONG> (ARM, 80 bytes, Stack size 16 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbistFail
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memoryPort0TestFailNotification
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbistPortTestStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[136]"></a>pbistGetConfigValue</STRONG> (ARM, 180 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>stcGetConfigValue</STRONG> (ARM, 96 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>efcGetConfigValue</STRONG> (ARM, 96 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>ccmr4GetConfigValue</STRONG> (ARM, 36 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>errata_PBIST_4</STRONG> (ARM, 780 bytes, Stack size 24 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = errata_PBIST_4
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pmuStopCounters_
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pmuStartCounters_
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pmuResetCounters_
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pmuGetCycleCount_
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pmuEnableCountersGlobal_
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pmuDisableCountersGlobal_
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[1d]"></a>enableParity</STRONG> (ARM, 96 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[1e]"></a>disableParity</STRONG> (ARM, 96 bytes, Stack size 0 bytes, sys_selftest.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[a0]"></a>vimParityErrorHandler</STRONG> (ARM, 416 bytes, Stack size 40 bytes, sys_vim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vimParityErrorHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmGroup2Notification
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esmGroup1Notification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_vim.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>vimInit</STRONG> (ARM, 116 bytes, Stack size 0 bytes, sys_vim.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[13a]"></a>vimChannelMap</STRONG> (ARM, 84 bytes, Stack size 16 bytes, sys_vim.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>vimEnableInterrupt</STRONG> (ARM, 292 bytes, Stack size 8 bytes, sys_vim.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>vimDisableInterrupt</STRONG> (ARM, 92 bytes, Stack size 0 bytes, sys_vim.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>vimGetConfigValue</STRONG> (ARM, 728 bytes, Stack size 0 bytes, sys_vim.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>setupPLL</STRONG> (ARM, 92 bytes, Stack size 0 bytes, system.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[a6]"></a>trimLPO</STRONG> (ARM, 64 bytes, Stack size 0 bytes, system.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[a5]"></a>setupFlash</STRONG> (ARM, 48 bytes, Stack size 0 bytes, system.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[a2]"></a>periphInit</STRONG> (ARM, 68 bytes, Stack size 0 bytes, system.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[a7]"></a>mapClocks</STRONG> (ARM, 228 bytes, Stack size 0 bytes, system.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[11]"></a>systemInit</STRONG> (ARM, 164 bytes, Stack size 8 bytes, system.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = systemInit &rArr; efcCheck &rArr; efcStuckZeroTest
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muxInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapClocks
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periphInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupFlash
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trimLPO
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPLL
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkefcSelfTest
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efcCheck
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selftestFailNotification
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[13e]"></a>systemPowerDown</STRONG> (ARM, 28 bytes, Stack size 0 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>systemGetConfigValue</STRONG> (ARM, 732 bytes, Stack size 0 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>tcmflashGetConfigValue</STRONG> (ARM, 280 bytes, Stack size 0 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>sramGetConfigValue</STRONG> (ARM, 208 bytes, Stack size 0 bytes, system.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>_dabort</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dabort.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_dabort
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetEntry
</UL>

<P><STRONG><a name="[b]"></a>_coreInitRegisters_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[c]"></a>_coreInitStackPointer_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[142]"></a>_getCPSRValue_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>_gotoCPUIdle_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpuSelfTest
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stcSelfCheck
</UL>

<P><STRONG><a name="[143]"></a>_coreEnableVfp_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>_coreEnableEventBusExport_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[144]"></a>_coreDisableEventBusExport_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>_coreEnableRamEcc_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRAMECC
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkB1RAMECC
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkB0RAMECC
</UL>

<P><STRONG><a name="[18]"></a>_coreDisableRamEcc_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkRAMECC
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkB1RAMECC
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkB0RAMECC
</UL>

<P><STRONG><a name="[145]"></a>_coreEnableFlashEcc_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>_coreDisableFlashEcc_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>_coreEnableIrqVicOffset_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[147]"></a>_coreGetDataFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>_coreClearDataFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>_coreGetInstructionFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>_coreClearInstructionFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>_coreGetDataFaultAddress_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>_coreClearDataFaultAddress_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>_coreGetInstructionFaultAddress_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>_coreClearInstructionFaultAddress_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>_coreGetAuxiliaryDataFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>_coreClearAuxiliaryDataFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>_coreGetAuxiliaryInstructionFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>_coreClearAuxiliaryInstructionFault_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>_disable_interrupt_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>_disable_FIQ_interrupt_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>_disable_IRQ_interrupt_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>_enable_interrupt_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>_esmCcmErrorsClear_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[10]"></a>_errata_CORTEXR4_57_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[f]"></a>_errata_CORTEXR4_66_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_core.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c_int00
</UL>

<P><STRONG><a name="[156]"></a>_pmuInit_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_pmu.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>_pmuEnableCountersGlobal_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_pmu.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_PBIST_4
</UL>

<P><STRONG><a name="[9f]"></a>_pmuDisableCountersGlobal_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_pmu.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_PBIST_4
</UL>

<P><STRONG><a name="[157]"></a>_pmuResetCycleCounter_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_pmu.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>_pmuResetEventCounters_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_pmu.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>_pmuResetCounters_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_pmu.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_PBIST_4
</UL>

<P><STRONG><a name="[9c]"></a>_pmuStartCounters_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_pmu.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_PBIST_4
</UL>

<P><STRONG><a name="[9d]"></a>_pmuStopCounters_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_pmu.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_PBIST_4
</UL>

<P><STRONG><a name="[159]"></a>_pmuSetCountEvent_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_pmu.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>_pmuGetCycleCount_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_pmu.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_PBIST_4
</UL>

<P><STRONG><a name="[15a]"></a>_pmuGetEventCount_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_pmu.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>_pmuGetOverflow_</STRONG> (ARM, 0 bytes, Stack size unknown bytes, sys_pmu.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_ldivmod</STRONG> (ARM, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>_ll_sdiv</STRONG> (ARM, 96 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hetInit
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcCalibration (via BLX)
</UL>

<P><STRONG><a name="[15f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_uldivmod</STRONG> (ARM, 0 bytes, Stack size 24 bytes, lludiv5.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[162]"></a>_ll_udiv</STRONG> (ARM, 816 bytes, Stack size 24 bytes, lludiv5.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>_ll_udiv_donemoving</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lludiv5.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[164]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[167]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via BLX)
</UL>

<P><STRONG><a name="[169]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[34]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[16a]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[16b]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_idiv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aeabi_sdiv_cr4.o(x$sdiv))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacuClockTime (via BLX)
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_idivmod</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aeabi_sdiv_cr4.o(x$sdivmod))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacuClockTime (via BLX)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CacuSecondTime (via BLX)
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_uidiv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aeabi_sdiv_cr4.o(x$udiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;capGetSignal (via BLX)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmGetSignal (via BLX)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmSetSignal (via BLX)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmSetDuty (via BLX)
</UL>
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
